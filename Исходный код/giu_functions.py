from tkinter import *
from tkinter.filedialog import *
import fileinput
from tkinter import messagebox as mb
from tkinter import ttk
from math import *
import math
import det_trig as dt

class GIU():
	"""
	–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.
	–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ–≥–æ, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
	–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
													"""
	
	def __init__(self, root, settings):
		"""–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤."""
		self.window = root
		self.sets = settings
		
		# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
		self.menu = self.create_menu(self.window, self.sets)
		# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ Text –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è
		self.txt = self.create_text(self.window, self.sets)
		
		# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ Radiobutton –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
		self.var = IntVar()
		self.radio_buttons = self.create_rad_buts(self.window, self.sets)
		
		# –ö–æ—Ä—Ç–µ–∂–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ text –∫–Ω–æ–ø–∫–∏			 
		self.msg_but = (('C', '()', '%', '/'), ('7', '8', '9', '*'), ('4', '5', '6', '-'), ('1', '2', '3', '+'), ('+/-', '0', '.', '='))
		self.msg_but_e = (('‚áÜ', 'Rad', '‚àö' ), ('sin', 'cos', 'tan'), ('ln', 'log', '1/x'), ('e^', 'x¬≤', 'x^'), ('|x|', 'œÄ', 'e'))
		self.msg_but_e2 = (('‚áÜ', 'Rad', '‚àõ' ), ('asin', 'acos', 'atan'), ('sinh', 'cosh', 'tanh'), ('asinh', 'acosh', 'atanh'), ('2‚Åø', 'x¬≥', 'x!'))
		
		# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –∫–Ω–æ–ø–æ–∫
		self.buttons = self.create_buttons(self.window, self.sets)
		self.buttons_e = self.create_buttons_e(self.window, self.sets)
		self.buttons_e2 = self.create_buttons_e2(self.window, self.sets)
		
		#  –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
		self.operators = {
		'+': lambda oper = '+' : self.operation(oper),  '-': lambda oper = '-' : self.operation(oper), 
		'*': lambda oper = '*' : self.operation(oper), '/': lambda oper = '/' : self.operation(oper),
		'%': lambda oper = '%' : self.operation(oper), '‚àö': lambda oper = '‚àö' : self.operation(oper),
		'‚àõ': lambda oper = '‚àõ' : self.operation(oper), 'x¬≤': lambda oper = 'x¬≤' : self.operation(oper),
		'x¬≥': lambda oper = 'x¬≥' : self.operation(oper), 'x^': lambda oper = 'x^' : self.operation(oper)
																											}
		# –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –¥–≤–∞ –±–µ–ª—ã—Ö –≤–æ—Ä–æ–Ω–∞
		self.trig_operators = ['sin', 'cos', 'tan', 'asin', 'acos', 'atan', 'ln', 'log', 'sinh', 'cosh', 'tanh', 'asinh', 'acosh', 'atanh', '|x|', 'e^']
		
		# –ß–∏—Å–ª–∞, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
		self.numbers = '0123456789'
		self.constants = ['œÄ','e','M','R','m','r','G','c','∆î','L','k','œÉ','‚Ñé','p','q','E','Œª','t','–ì','N','Œµ','–ê','–ü']
		
		# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ Listbox
		self.cb = self.create_combobox(self.window, self.sets)

		# –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ —Ä–∞–¥–∏–∞–Ω –≤ –≥—Ä–∞–¥—É—Å—ã –∏ –æ–±—Ä–∞—Ç–Ω–æ.
		self.flag_deg = True
		
		# –§–ª–∞–≥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '‚áÜ'
		self.flag_but = False
		
		# –§–ª–∞–≥ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ Combobox
		self.flag_box = False
		
	def operation(self, operator):
		if operator in '+-*/%':
			self.txt.insert(self.pos, operator)
		elif operator == '‚àö':
			self.txt.insert(self.pos, '^(1/2)')
		elif operator == '‚àõ':
			self.txt.insert(self.pos, '^(1/3)')
		elif operator == 'x¬≤':
			self.txt.insert(self.pos, '^(2)')
		elif operator == 'x¬≥':
			self.txt.insert(self.pos, '^(3)')
		elif operator == 'x^':
			self.txt.insert(self.pos, '^(')	
		
	def create_text(self, window, sets):
		"""–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç."""
		txt = Text(window, width=sets.width_text, height=sets.height_text, font=sets.font)
		txt.grid(row=0, column=0, columnspan=4)
		return txt
		
	def create_rad_buts(self, window, sets):
		"""–°–æ–∑–¥–∞–µ—Ç –¥–≤–µ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–æ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
		self.var.set(0)
		rad_1 = Radiobutton(window, width=sets.radwidth, height=sets.radheight, bg=sets.radcolor, text ="–û–±—ã—á–Ω—ã–π", variable=self.var, value=0, command=self.change_calc)
		rad_2 = Radiobutton(window, width=sets.radwidth, height=sets.radheight, bg=sets.radcolor2, text="–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π", variable=self.var, value=1, command=self.change_calc)
		rad_1.grid(row=1, column=0, columnspan=1)
		rad_2.grid(row=1, column=1, columnspan=1)
		my_list = [rad_1, rad_2]
		return my_list
			
	def create_buttons(self, window, sets):
		"""–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä—É–ø–ø—É –∫–Ω–æ–ø–æ–∫."""
		buttons = []
		r = 1
		for tuple_ in self.msg_but:
			r += 1
			for msg in tuple_:
				button = Button(window, width=sets.width, height=sets.height, text=msg, font=sets.font, bg=sets.bg, fg=sets.fg)
				if button['text'] in '+-*/%()':
					button.config(fg='lightgreen')
				elif button['text'] == 'C':
					button.config(fg='orange')
				elif button['text'] == '=':
					button.config(bg='green')
				button.grid(row=r, column=tuple_.index(msg))
				buttons.append(button)	
		button = Button(window, width=sets.width, height=1, text='üìè', font=sets.font, bg='grey', fg='black')
		buttons.append(button)
		button = Button(window, width=sets.width, height=1, text='const', font=sets.font, bg='grey', fg='black')
		button.grid(row=1, column=2)
		buttons.append(button)
		button = Button(window, width=sets.width, height=1, text='‚å´', font=sets.font, bg='white', fg='green')
		button.grid(row=1, column=3)
		buttons.append(button)
		return buttons
		
	def create_buttons_e(self, window, sets):
		"""–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
		buttons = []
		r = 1
		for tuple_ in self.msg_but_e:
			r += 1
			for msg in tuple_:
				button = Button(window, width=sets.width_e, height=sets.height, text=msg, font=sets.font, bg=sets.bg, fg=sets.fg)
				buttons.append(button)	
		return buttons
	
	def create_buttons_e2(self, window, sets):
		"""–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
		buttons = []
		r = 1
		for tuple_ in self.msg_but_e2:
			r += 1
			for msg in tuple_:
				button = Button(window, width=sets.width_e, height=sets.height, text=msg, font=sets.font, bg=sets.bg, fg=sets.fg)
				buttons.append(button)	
		return buttons
	
	def create_messagebox(self, window, sets):
		"""–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ messagebox"""
		message = mb.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ!")
	
	def create_menu(self, window, sets):
		"""–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é"""
		def open_file():
			self.txt.delete(1.0, END)
			id_file = askopenfilename()
			for string in fileinput.input(id_file):
				self.txt.insert(END, string)
			
		def save_file():
			saved_id_file = asksaveasfilename()
			letter = self.txt.get(1.0, END)
			f = open(saved_id_file, 'w')
			f.write(letter)
			f.close()
		
		def save_as_file():
			saved_id_file = asksaveasfilename()
			letter = self.txt.get(1.0, END)
			f = open(saved_id_file, 'w')
			f.write(letter)
			f.close()
		
		def close_program():
			if mb.askyesno("Exit", "Do you want save your result"):
				save_file()
				self.window.destroy()
			else:
				self.window.destroy()	
		main_menu = Menu(self.window)
		self.window.config(menu=main_menu)
		
		file_menu = Menu(main_menu)
		main_menu.add_cascade(label='File', menu=file_menu)
		file_menu.add_command(label='Open', command=open_file)
		file_menu.add_command(label='Save', command=save_file)
		file_menu.add_command(label='Save as', command=save_as_file)
		file_menu.add_command(label='Exit', command=close_program)
		
		edit_menu = Menu(main_menu)
		main_menu.add_cascade(label='Edit', menu=edit_menu)
		edit_menu.add_command(label='Copy', command=None)
		edit_menu.add_command(label='Cute', command=None)
		edit_menu.add_command(label='Paste', command=None)
	
	def create_combobox(self, window, sets):
		list_box = ttk.Combobox(self.window, values=self.constants)
		return list_box
	
	def call_combobox(self, event):
		formula = self.txt.get(1.0, END)
		i = int(self.txt.index(INSERT)[2:])
		pos = self.txt.index(INSERT)
		if formula[i-1] in self.constants or formula[i-1] in self.numbers or formula[i-1] == ')':
			self.txt.insert(pos, '*' + self.cb.get())
		else:
			self.txt.insert(pos, self.cb.get())
		self.cb.grid_forget()
	
	def change_calc(self):
		"""–ú–µ–Ω—è–µ—Ç –æ–±—ã—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –∏ –æ–±—Ä–∞—Ç–Ω–æ"""
		if self.var.get() == 0: # –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
			self.window.geometry('480x405')
			self.txt.configure(width=self.sets.width_text)
			self.txt.grid(row=0, column=0, columnspan=4)
			self.radio_buttons[0].grid(row=1, column=0, columnspan=1)
			self.radio_buttons[0].configure(width=self.sets.radwidth)
			self.radio_buttons[1].grid(row=1, column=1, columnspan=1)
			self.radio_buttons[1].configure(width=self.sets.radwidth)
			self.cb.grid_forget()
			r = 2
			c = 0
			if self.flag_but == False:
				for button in self.buttons_e:
					button.grid_forget()
			else:
				for button in self.buttons_e2:
					button.grid_forget()
			for button in self.buttons:
				if button['text'] == '‚å´':
					button.configure(width=self.sets.width, height=1)
					button.grid(row=1, column=3)
				elif button['text'] == 'const':
					button.configure(width=self.sets.width, height=1)
					button.grid(row=1, column=2)
				else:
					button.configure(width=self.sets.width)
					button.grid(row=r, column=c)
				if c == 3:
					c = 0
					r += 1
				else:
					c += 1

				
		
		elif self.var.get() == 1: # –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
			self.window.geometry('465x405')
			self.txt.configure(width=self.sets.width_text_e)
			self.txt.grid(row=0, column=0, columnspan=7)
			self.radio_buttons[0].grid(row=1, column=0, columnspan=2)
			self.radio_buttons[0].configure(width=self.sets.radwidth_e)
			self.radio_buttons[1].grid(row=1, column=2, columnspan=2)
			self.radio_buttons[1].configure(width=self.sets.radwidth_e)
			self.cb.grid_forget()
			r = 2
			c = 0
			if self.flag_but == False:
				for button in self.buttons_e:
					button.configure(width=self.sets.width_e)
					button.grid(row=r, column=c)
					if c == 2:
						c = 0
						r += 1
					else:
						c += 1
			else:
				for button in self.buttons_e2:
					button.configure(width=self.sets.width_e)
					button.grid(row=r, column=c)
					if c == 2:
						c = 0
						r += 1
					else:
						c += 1
			r = 2
			c = 3
			for button in self.buttons:
				if button['text'] == '‚å´':
					button.configure(width=self.sets.width_e, height=1)
					button.grid(row=1, column=6)
				elif button['text'] == 'const':
					button.configure(width=self.sets.width_e, height=1)
					button.grid(row=1, column=5)
				elif button['text'] == 'üìè':
					button.configure(width=self.sets.width_e, height=1)
					button.grid(row=1, column=4)
				else:
					button.configure(width=self.sets.width_e)
					button.grid(row=r, column=c)
				if c == 6:
					c = 3
					r += 1
				else:
					c += 1

	def change_text_button(self):
		"""–ú–µ–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '‚áÜ' """	
		r = 2
		c = 0
		if self.flag_but == False:	
			self.flag_but = True
			for button in self.buttons_e:
				button.grid_forget()
			for button in self.buttons_e2:
				button.grid(row=r, column=c)
				button.configure(width=self.sets.width_e)
				
				if c == 2:
					c = 0
					r += 1
				else:
					c += 1
		else:
			self.flag_but = False 
			for button in self.buttons_e2:
				button.grid_forget()
			for button in self.buttons_e:
				button.grid(row=r, column=c)
				button.configure(width=self.sets.width_e)
				
				if c == 2:
					c = 0
					r += 1
				else:
					c += 1

	def check_button(self, buttons, buttons_e, buttons_e2):
		"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏"""
		for button in self.buttons:
			button.bind('<Button-1>', lambda event, message=button['text'] : self.click_button(event, message))

		for button in self.buttons_e:
			button.bind('<Button-1>', lambda event, message=button['text'] : self.click_button(event, message))

		for button in self.buttons_e2:
			button.bind('<Button-1>', lambda event, message=button['text'] : self.click_button(event, message))
		
		self.cb.bind("<<ComboboxSelected>>", self.call_combobox)

	def eval_(self, formula_string):
		"""–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è."""
		if self.flag_deg == True:
			sin = dt.sin
			cos = dt.cos
			tan = dt.tan
			asin = dt.asin
			acos = dt.acos
			atan = dt.atan
		formula = ''
		index = -1
		for i in formula_string:
			index += 1
			if i == '^':
				formula += '**'
			elif i == 'œÄ':
				formula += 'pi'
			elif i == 'n' and formula_string[index-1] == 'l':
				formula += 'og'
			elif i == 'g':
				formula += 'g10'
			elif i == 'M':
				formula += '(1.9891*10**30)'
			elif i == 'R':
				formula += '(6.9551*10**8)'
			elif i == 'm':
				formula += '(5.97*10**24)'				
			elif i == 'r':
				formula += '(6371*10**3)'
			elif i == 'p':
				formula += '(1.672*10**(-27))'
			elif i == 'œÉ':
				formula += '(5.670*10**(-8))'
			elif i == '∆î':
				formula += '(9.460*10**15)'
			elif i == 'L':
				formula += '(3.827*1026)'
			elif i == 'q':
				formula += '(1.602*10**(-19))'
			elif i == 'E':
				formula += '(9.1*10**(-31))'
			elif i == 'Œª':
				formula += '(2.426*10**(-12))'
			elif i == '–ê':
				formula += '(149597870700)'
			elif i == '–ü':
				formula += '(3.09*10**16)'
			elif i == 't' and formula_string[index+1] != 'a':
				formula += '(273)'
			elif i == '–ì':
				formula += '(365.242)'
			elif i == 'N':
				formula += '(6.022*10**23)'
			elif i == 'Œµ':
				formula += '149597870700'
			elif i == 'G':
				formula += '(6.674*10**(-11))'
			elif i == '‚Ñé':
				formula += '(6.626*10**(-34))'																																																											
			else:
				formula += i
		# –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		return eval(formula)
		
	def click_button(self, event, message):
		"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏."""
		formula = self.txt.get(1.0, END) # –ø–æ–ª—É—á–∞–µ—Ç –≤—Å—ë, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∏–¥–∂–µ—Ç–µ Text
		next_item = message # –ø—Ä–∏—Ö–æ–¥—è—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
		
		i = int(self.txt.index(INSERT)[2:])	# –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
		pos = self.txt.index(INSERT) # –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ insert
		pos_ = ''
		if int(pos[2:]) == 0 or int(pos[2:]) == 1:
			pos_ = '1.0'
		else:
			k = str(int(int(pos[2:]) - 1))
			pos_ = '1.' + k
				
		if next_item in self.numbers: # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —Ü–∏—Ñ—Ä–æ–π, —Ç–æ
			if formula[0] == '0' and len(formula) == 2: # –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è 0 –∏ –æ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π, —Ç–æ
				self.txt.delete(pos_, pos) # 0 —É–¥–∞–ª—è–µ—Ç—Å—è –∏
				self.txt.insert(pos, next_item) # –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–æ–≤–∞—è/–¥—Ä—É–≥–∞—è —Ü–∏—Ñ—Ä–∞
				
			elif formula[i] in '(':
				self.txt.insert(pos, next_item + '*' )
				
			elif formula[i] in 'sctal' and pos == '1.0':
				self.txt.insert(pos, next_item + '*') # –≤—ã–≤–æ–¥–∏—Ç—Å—è * –∏ —Ü–∏—Ñ—Ä–∞
				
			elif formula[i] in 'sctal' and formula[i-1] not in 'sincotahlgb':
				self.txt.insert(pos, '*' + next_item) # –≤—ã–≤–æ–¥–∏—Ç—Å—è * –∏ —Ü–∏—Ñ—Ä–∞
			
			elif formula[i] in self.operators:
				self.txt.insert(pos, next_item)
				
			elif len(formula) == 1 or formula[i-1] == '.' or formula[i-1] == '(' or formula[i-1] in self.numbers or formula[i-1] in '+-*/%':
				if formula[i-1] == '0' and (formula[i-2] in self.operators or formula[i-2] == '('):
					self.txt.insert(pos, next_item)
					self.txt.delete(pos_, pos)
				else:
					self.txt.insert(pos, next_item)
			
			elif formula[i-1] == '0' and formula[i-2] not in self.numbers and formula[i-2] != '.':
				self.txt.delete(pos_, pos) # 0 —É–¥–∞–ª—è–µ—Ç—Å—è –∏
				self.txt.insert(pos, next_item) # –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–æ–≤–∞—è/–¥—Ä—É–≥–∞—è —Ü–∏—Ñ—Ä–∞
			
			elif formula[i-1] == ')' and formula[i] not in '+-*/%' : # –µ—Å–ª–∏ –∫—É—Ä—Å–æ—Ä —Å—Ç–æ–∏—Ç –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–∫–æ–±–∫–∏ –∏ –ø–æ—Å–ª–µ –Ω–µ–µ –Ω–µ—Ç '+-*/%', —Ç–æ
				self.txt.insert(pos, '*' + next_item) # –≤—ã–≤–æ–¥–∏—Ç—Å—è * –∏ —Ü–∏—Ñ—Ä–∞
				
			elif formula[i-1] == '!':
				self.txt.insert(pos, '*' + next_item)
			
			elif formula[i-1] in self.constants:
				self.txt.insert(pos, '*' + next_item)
						
		elif next_item in self.constants: # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π, —Ç–æ
			if len(formula) == 1:
				self.txt.insert(pos, next_item)	
				
			elif formula[i-1] in self.numbers or formula[i-1] == ')' or formula[i-1] in self.constants:
				try:
					if formula[i+1] in self.numbers or formula[i+1] in self.constants or formula[i+1] == '(' or formula[i+1] in 'sctal':
						self.txt.insert(pos, '*' + next_item + '*')
				except:
					self.txt.insert(pos, '*' + next_item)
			
			elif formula[i-1] in '+-*/%' or formula[i-1] == '(':
				self.txt.insert(pos, next_item)
			
			elif formula[i-1] == '!':
				self.txt.insert(pos, '*' + next_item)				
			
			elif formula[i] in 'sctal' and pos == '1.0':
				self.txt.insert(pos, next_item + '*') # –≤—ã–≤–æ–¥–∏—Ç—Å—è * –∏ —Ü–∏—Ñ—Ä–∞
				
			elif formula[i] in 'sctal' and formula[i-1] not in 'sincotahlgb':
				self.txt.insert(pos, '*' + next_item) # –≤—ã–≤–æ–¥–∏—Ç—Å—è * –∏ —Ü–∏—Ñ—Ä–∞

		elif next_item in self.operators: # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, —Ç–æ
			self.pos = pos
			self.pos_ = pos_
			if formula[i-1] in '1234567890)' or formula[i-1] in self.constants:
				self.operators[next_item]()
					
			elif formula[i-1] in self.operators and formula[i-2] != '(':
				self.operators[next_item]()
				self.txt.delete(pos_, pos)
				
			elif formula[i-1] == ')':
				self.operators[next_item]()
				
			elif formula[i-1] == '(' and next_item in '+-':
				self.operators[next_item]()
				
			elif formula[i-1] in '+-' and formula[i-2] == '(' and next_item in '+-':
				self.txt.delete(pos_, pos)
				self.operators[next_item]()
			
			elif formula[i-1] == '!':
				self.operators[next_item]()
			
			elif formula[i] in 'sctal' and next_item in '+-*/%' and formula[i-1] in '1234567890)':
				self.operators[next_item]()

		elif next_item in self.trig_operators: # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, —Ç–æ
			
			if len(formula) == 1 or formula[i-1] == '(':
				if next_item == '|x|':
					self.txt.insert(pos, 'abs(')
				elif next_item == 'e^':
					self.txt.insert(pos, next_item + '(')
				else:
					self.txt.insert(pos, next_item + '(')
					
			elif formula[i-1] in '1234567890' or formula[i-1] in self.constants:
				if next_item == '|x|':
					self.txt.insert(pos, '*abs(')
				elif next_item == 'e^':
					self.txt.insert(pos, '*e^(')
				else:
					self.txt.insert(pos, '*' + next_item + '(')
			
			elif formula[i-1] in self.operators:
				if next_item == '|x|':
					self.txt.insert(pos, 'abs(')
				else:
					self.txt.insert(pos, next_item + '(')
					
			elif formula[i-1] == '!':
				if next_item == '|x|':
					self.txt.insert(pos, '*abs(')
				else:
					self.txt.insert(pos, '*' + next_item)
			
			elif formula[i-1] == ')':
				if next_item == '|x|':
					self.txt.insert(pos, '*abs(')
				elif next_item == 'e^':
					self.txt.insert(pos, '*e^(')
				else:
					self.txt.insert(pos, '*' + next_item + '(')
			
			elif formula[i] in '1234567890cstla':
				if next_item == '|x|':
					self.txt.insert(pos, 'abs(')
				else:
					self.txt.insert(pos, next_item + '(')
					
		elif next_item == '()': # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —Å–∫–æ–±–∫–æ–π, —Ç–æ
			if len(formula) == 1: # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞, —Ç–æ
				self.txt.insert(pos, '(') # –≤—ã–≤–æ–¥–∏—Ç—Å—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
				
			elif formula[i-1] == '(': # –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞, —Ç–æ
				self.txt.insert(pos, '(') # –≤—ã–≤–æ–¥–∏—Ç—Å—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
				
			elif (formula[i-1] in '1234567890' and formula[i] in '1234567890') : # –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —á–∏—Å–ª–æ –∏ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —á–∏—Å–ª–æ, —Ç–æ
				self.txt.insert(pos, '*(') # –≤—ã–≤–æ–¥–∏—Ç—Å—è '*('
				
			elif (formula[i-1] in '1234567890' or formula[i-1] in self.constants) and formula.count('(') > formula.count(')'): # –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —á–∏—Å–ª–æ –∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –±–æ–ª—å—à–µ, —Ç–æ
				self.txt.insert(pos, ')') # –≤—ã–≤–æ–¥–∏—Ç—Å—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
				
			elif formula[i-1] in '1234567890!' or formula[i-1] in self.constants: # –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —á–∏—Å–ª–æ –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞, —Ç–æ
				self.txt.insert(pos, '*(') # –≤—ã–≤–æ–¥–∏—Ç—Å—è '*('
				
			elif formula[i-1] == '.':
				None
				
			elif formula[i-1] in '1234567890' and len(formula)-2 == i: # –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —á–∏—Å–ª–æ –∏ –ø—Ä–∏ —ç—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ, —Ç–æ 
				self.txt.insert(pos, ')') # –≤—ã–≤–æ–¥–∏—Ç—Å—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
				
			elif formula[i-1] == ')' and formula.count('(') > formula.count(')'): # –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –±–æ–ª—å—à–µ
				self.txt.insert(pos, ')') # —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
				
			elif formula[i-1] == ')' and formula.count('(') == formula.count(')'):
				self.txt.insert(pos, '(') # –≤—ã–≤–æ–¥–∏—Ç—Å—è '*('
				self.txt.insert(pos, '*')
			# –≤ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ –≤—ã–≤–æ–¥–∏–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É			
			else:
				self.txt.insert(pos, '(')
	
		elif next_item == '‚å´': # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è '‚å´', —Ç–æ
			self.txt.delete(pos_, pos)  # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
			
		elif next_item == 'C': # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è  'C', —Ç–æ
			self.txt.delete(0.0, END) # –æ—á–∏—â–∞–µ–º –≤—Å—ë –ø–æ–ª–µ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ –∏
					
		elif next_item == '+/-':	# –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è '+/-'
			
			if len(formula) == 1: # –µ—Å–ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ –ø—É—Å—Ç–æ–µ, —Ç–æ
				self.txt.insert(END, '(-') # –≤—ã–≤–æ–¥–∏–º '(-'
							
			elif formula[i-1] == '-' and formula[i-2] == '(':	# –µ—Å–ª–∏ –¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ —ç—Ç–æ '(-', —Ç–æ
				pos_ = pos_[0:2] + str((int(pos_[2:]) - 1))
				self.txt.delete(pos_, pos) # —É–¥–∞–ª—è–µ–º '(-'
			
			elif formula[i-1] in self.operators or formula[i-1] == '(':	# –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä, —Ç–æ
				self.txt.insert(pos, '(-')	# –≤—ã–≤–æ–¥–∏–º '(-'
			
			elif formula[i-1] in ')':	# –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç ')', —Ç–æ
				self.txt.insert(pos, '*(-')	# –≤—ã–≤–æ–¥–∏–º '(-'
			
			elif formula[i-1] in '1234567890' or formula[i-1] in self.constants:	# –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —á–∏—Å–ª–æ –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞, —Ç–æ
				for k in range(len(formula[0:i]), 0, -1):	# –∏–¥–µ–º —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
					if formula[k-1] == '-' and formula[k-2] == '(':	# –µ—Å–ª–∏ –¥–≤–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ '(-'
						pos = pos[0:2] + str(int(k))
						pos_ = pos[0:2] + str(int(k-2))
						self.txt.delete(pos_, pos) # —Ç–æ —É–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ '(-'
						break
					elif formula[k-1] not in '1234567890œÄe.':	# –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª–µ—Ç—Å—è —á–∏—Å–ª–æ–º/–∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π, —Ç–æ
						pos = pos[0:2] + str(int(k))
						self.txt.insert(pos, '(-')	# –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ '(-'
						break
					elif k == 1 and formula[k-1] in '1234567890œÄe':	# –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —á–∏—Å–ª–æ/–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞, —Ç–æ
						self.txt.insert(1.0, '(-')	# –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ '(-'

		elif next_item == '.':	# –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è '.', —Ç–æ
			new_formula = self.txt.get(1.0, pos) # –ø–æ–ª—É—á–∞–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Text –¥–æ —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫—É—Ä—Å–æ—Ä
			my_number = ''
			for k in range(len(new_formula[0:i]), 0, -1):	# –∏–¥–µ–º —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
				if formula[k-1] in 'œÄe':
					my_number += formula[k-1]
					break
				if formula[k-1] in '1234567890.':
					my_number += formula[k-1]
				else:
					break
			if my_number.count('.') == 1:
				None
			
			elif 'œÄ' in my_number or 'e' in my_number:
				None
			
			elif formula[i] in self.numbers or formula[i-1] in self.numbers:
				self.txt.insert(pos, next_item)
			
			elif len(my_number) == 0:
				None
			

		elif next_item == '‚áÜ':	# –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è '‚áÜ', —Ç–æ
			self.change_text_button()
			
		elif next_item == 'Rad':	# –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è 'Rad', —Ç–æ
			if self.flag_deg == True:
				self.flag_deg = False
				self.buttons_e[1].config(text = 'Deg')
				self.buttons_e2[1].config(text = 'Deg')
			else:
				self.flag_deg = True
				self.buttons_e[1].config(text = 'Rad')
				self.buttons_e2[1].config(text = 'Rad')
		
		elif next_item == '2‚Åø':	# –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è '2‚Åø', —Ç–æ
			if len(formula) == 1:
				self.txt.insert(pos, '2^(')
			elif formula[i-1] in '+-*/%(':
				self.txt.insert(pos, '2^(')
			elif formula[i-1] in self.numbers or formula[i-1] in self.constants or formula[i-1] in '!)':
				self.txt.insert(pos, '*2^(')
			elif formula[i] in self.numbers or formula[i] in self.constants or formula[i] in '(':
				self.txt.insert(pos, '2^(')
		
		elif next_item == 'x!':	# –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è 'x!', —Ç–æ
			if formula[i-1] in '1234567890)':
				self.txt.insert(pos, '!')
				
		elif next_item == '1/x':	# –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è '1/x', —Ç–æ
			if len(formula) == 1 or formula[i-1] == '(' or formula[i-1] in self.operators :
				self.txt.insert(pos, '1/')
			elif formula[i-1] in '1234567890)œÄe!':
				self.txt.insert(pos, '*1/')
				
		elif next_item == 'const':
			if self.flag_box == False:
				if self.var.get() == 0:
					self.cb.configure(width=16, height=17)
					self.cb.grid(row=2, column=2)
				else:
					self.cb.configure(width=6, height=17)
					self.cb.grid(row=2, column=5)
				self.flag_box = True
			else:
				self.flag_box = False
				self.cb.grid_forget()
				
				
		elif next_item == '=':	# –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è '=', —Ç–æ
			print(formula)
			try:
				result = round(self.eval_(formula), 6)
				if float(result) == -0.0:
					result = '0'
				self.txt.delete(1.0, END)
				self.txt.insert(END, result)
			except ZeroDivisionError:
				mb.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –¥–µ–ª–∏—Ç–µ –Ω–∞ –Ω–æ–ª—å  ï‚Ä¢·¥•‚Ä¢ î")
			except:
				self.create_messagebox(self.window, self.sets)
	
			
				
